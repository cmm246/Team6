/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package map.GUI.Dialog;
/*
 * PlayerDialog.java
 * 
 */
import java.util.HashMap;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.table.TableCellRenderer;

import map.Conditions.Conditions;
import map.Conditions.ItemNeedCarried;
import map.Conditions.ItemNotNeedCarried;
import map.Conditions.RoomVisited;
import map.Conditions.SpecificMagicWord;
import map.Conditions.SpecificProbality;
import map.GUI.PlayerInfoDialog;
import map.Model.*;
import map.Model.Item.Property;
/**
 *
 * @author ALEX-GAO
 */
public class PlayerDialog extends javax.swing.JDialog {
	
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;

    private boolean retValue;
	private Connection con;
	private Vector<Item> items;
	private Vector<Room> rooms;
	private boolean editable;
	private GTableModel tableModel;
	private static String[] columnNames = {"Number", "Detial", "Delete"};
    
	Player player = new Player();
    private int score;
	private Vector<Item> inventory;
	private Room current_location;
	private int health;
	
    /** Creates new form PlayerDialog */
    public PlayerDialog(java.awt.Frame parent, boolean modal, Player player) {
        super(parent, modal);
        this.player = player;
        editable = true;
       initComponents();
    }
    
    public PlayerDialog(Player player) {
        super(new javax.swing.JFrame(), true);
        this.player = new Player(player);
        //initComponents();
        //this.player = player;
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    public void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        this.setTitle("Player Information Dialog");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        
      //----------add item Button action
        jButton1.setText("Add item");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
      
        jLabel1.setText("Score");
 
        jLabel2.setText("Health");

        jLabel3.setText("Damage");

        jLabel4.setText("Room");

              
      //-1---Display player's score        
        jTextField1.setText(String.valueOf(player.getScore()));
        //jTextField1.setText("jTextField1");
        
      //-2---Display health        
        jTextField2.setText(String.valueOf(player.getHealth()));   
        

      //-3-- display damage
        jTextField3.setText(String.valueOf(player.getDamage()));

        
        //-4---Display room name        
        jTextField4.setText(player.currentLocation().getName());

      //----Display all items taken by the Player in Inventory.
		if(player.getInventory() == null)
			inventory = new Vector<Item>();
		else
			inventory = new Vector<Item>(player.getInventory());

		jLabel5.setText("Inventory");     
        
        tableModel = new GTableModel(columnNames, player.getInventory());
        tableModel.setEditable(editable);
        tableModel.setItems(player.getInventory());
        
        //tableModel.setRooms(player.getOwner().getRooms());
        
        //----------
        /*player.setScore(Integer.valueOf(jTextField1.getText()));
        player.setHealth(Integer.valueOf(jTextField2.getText()));
        player.setDamage(Integer.valueOf(jTextField3.getText()));
        
        for(Room room : rooms)
        {
        	if (room.getName() == jTextField4.getText()){player.setCurrent_location(room);}
        }        
        player.setInventory(inventory);
        //-----------
        */
                
        jTable1.setModel(tableModel);
        jTable1.setSurrendersFocusOnKeystroke(true);

        TableCellRenderer defaultRenderer;
	    defaultRenderer = jTable1.getDefaultRenderer(JButton.class);
	    jTable1.setDefaultRenderer(JButton.class,
				       new JTableButtonRenderer(defaultRenderer));
	    jTable1.addMouseListener(new JTableButtonMouseListener(jTable1));
	    jTable1.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 300));
	    jTable1.setRowHeight(30);
	    
		Vector<Item> items1 = player.getInventory();
		if(items1 != null){
			int idx = 0;
			for(Item foo : items1){
				tableModel.addEmptyRow();
				tableModel.setValueAt(String.valueOf(foo.getId()), idx, 0);
				idx++;
			}
		}
        jScrollPane1.setViewportView(jTable1); 
        
        
        
        

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(381, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField4)
                            .addComponent(jTextField3)
                            .addComponent(jTextField2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(97, 97, 97)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    	player.setScore(Integer.valueOf(jTextField1.getText()));
        player.setHealth(Integer.valueOf(jTextField2.getText()));
        player.setDamage(Integer.valueOf(jTextField3.getText()));
        
        for(Room room : rooms)
        {
        	if (room.getName() == jTextField4.getText()){player.setCurrent_location(room);}
        }        
        player.setInventory(inventory);
    	
    	doClose(RET_OK);
        
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
        
        
    }//GEN-LAST:event_cancelButtonActionPerformed
    
       
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ButtonActionPerformed
        
    	HashMap<Property, Object> props = new HashMap<Property, Object>();
    	props.put(Property.DRINKABLE, (Integer)10);
    	props.put(Property.THROWABLE, (Integer)10);
    	props.put(Property.LOCKABLE, (Boolean)true);
    	
//    	Item carried = new Item();
//    	carried.setName("Key1");
//    	carried.setKey(true);
//
//    	Item item = new Item();
//    	    	
//    	Vector<Item> items = new Vector<Item>();
//    	items.add(item);
//    	items.add(new Item("Apple"));
//    	Item foo = new Item("Key2");
//    	foo.setKey(true);
//    	items.add(foo);
//    	items.add(carried);
//    	
//    	Room room = new Room();
//    	room.setName("Room1");
//    	Vector<Room> rooms = new Vector<Room>();
//    	rooms.add(room);
//    	rooms.add(new Room("Room2"));

//    	Vector<Conditions> cons = new Vector<Conditions>();
//    	    	
//    	item.setVcon(cons);
    	Item item = new Item();
    	ItemDialog dialog = new ItemDialog();
    	dialog.setItem(item);
    	dialog.setItems(items);
    	dialog.setRooms(rooms);
    	dialog.setEditable(true);
    	
    	dialog.initComponents();
    	dialog.setVisible(true);    	
    	
    	//---if reset value--
    	
    	if(dialog.isRetValue()){
    		    		
    		Item item1 = dialog.getItem();
    		tableModel.addEmptyRow();
    		int idx1 = tableModel.getDataVector().size() - 1;
    		tableModel.setValueAt(String.valueOf(item1.getId()), idx1, 0);
    		//items.add(item1);//inventory.add(item1);
    		inventory.add(item1);	
    	}    		
			
   }
  //GEN-LAST:event_jButton1ButtonActionPerformed
   

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
        
        
    }//GEN-LAST:event_closeDialog

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
       
        	Room room1 = new Room("room5");
        	Vector<Item> inventory = new Vector();
        	Item item1 = new Item("Test_Apple", "Friut apple",room1);
        	Item item2 = new Item("Test_Orange", "Friut orange",room1);
        	Item item3 = new Item("Test_Peach", "Friut peach",room1);
        	Item item4 = new Item("Test_weapon", "Weapon",room1);
        	Item item5 = new Item("Test_painapple", "Piantapple",room1);
        	inventory.add(item1);
        	inventory.add(item2);
        	inventory.add(item3);
        	inventory.add(item4);
        	inventory.add(item5);
        	Player player = new Player(500, inventory, room1, 100,10);
            PlayerDialog dialog = new PlayerDialog(new javax.swing.JFrame(), true, player);
            dialog.setVisible(true);
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                }
            });
        	
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;

	/**
	 * @return the player
	 */
	public Player getPlayer() {
		return player;
	}

	/**
	 * @param player the player to set
	 */
	public void setPlayer(Player player) {
		this.player = player;
	}

	/**
	 * @return the items
	 */
	public Vector<Item> getItems() {
		return items;
	}

	/**
	 * @param items the items to set
	 */
	public void setItems(Vector<Item> items) {
		this.items = items;
	}

	/**
	 * @return the rooms
	 */
	public Vector<Room> getRooms() {
		return rooms;
	}

	/**
	 * @param rooms the rooms to set
	 */
	public void setRooms(Vector<Room> rooms) {
		this.rooms = rooms;
	}
}
